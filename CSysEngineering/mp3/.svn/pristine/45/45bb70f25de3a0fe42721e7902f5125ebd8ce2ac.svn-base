//File containing source code for terminal driver

#include "terminal.h"
#include "lib.h"


/* Function to handle system calls for reading from the terminal
 * PARAMETERS: fd - ???
 			   buf - a pointer to a buffer in which to write the data
 			   nbytes - the number of bytes to read into the buffer
 * RETURNS: the number of bytes successfully read
 * INFO:
 */
int32_t terminal_read(int32_t fd, void * buf, int32_t nbytes)
{
	return 0;
}

/* Function to handle system calls for writing to the terminal
 * PARAMETERS: fd - ???
 			   buf - a pointer to a buffer which contains the data to write
 			   nbytes - the number of bytes to write from the buffer
 * RETURNS: the number of bytes successfully written, or -1 on failure 
 * INFO:
 */
int32_t terminal_write(int32_t fd, void * buf, int32_t nbytes)
{
	return 0;
}

/* Function to initialize the terminal
 * PARAMETERS: none
 * RETURNS: 0 on success, -1 on failure
 * INFO:
 */
int32_t terminal_open(void)
{
	clear();
	screen_x = 0;
	screen_y = 0;
	print_line_header();
	return 0;
}

/* Function to close the terminal
 * PARAMETERS: none
 * RETURNS: -1 always, since the terminal should never be closed
 * INFO: This function does nothing, since it should not be possible
 *       for a system call to close the terminal
 */
int32_t terminal_close(void)
{
	//Terminal cannot be closed, so return -1
	return -1;  
}

/* Function to clear the screen and put the cursor at the top
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function clears video memory associated with the terminal.
 * NOTE: If scroll_up and scroll_down are implemented, this function 
 *       will move the data in video memory to a stack before clearing
 *       it out.
 */
void clear_screen(void)
{
	/***If arrow key scrolling is implemented, save info HERE***/

	//Clear out video memory and put the cursor at the top
	clear();
	screen_x = 0;
	screen_y = 0;
	print_line_header();

}

/* Function to print the "[user@ourOS]$" header at the beginning of
 * each line.
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function might need further modification in order
 *       to display the current directory on each newline. It 
 *       will print the header at whatever location screen_x and 
 *       screen_y are currently set to.
 */
void print_line_header(void)
{
	printf("[user@ourOS]$ ");
	return;
}	

/* Function to put a line header on the next line and move the cursor
 * PARAMETERS: line_header - if 0, a line header will not be printed. 
 *                           Otherwise, a line header is printed.
 * RETURNS: void
 * INFO: This function will automatically check if scrolling is needed
 */
void create_newline(int line_header)
{
	//Check if scrolling is needed
	if(screen_y >= 24)
	{
		general_scroll();
		//Make sure screen_y is 24 in case it was above valid range
		screen_y = 24;      
	}
	else
		screen_y++;
	screen_x = 0;
	if(line_header)
		print_line_header();
	return;
}

/* Function to scroll the screen up if text reaches the bottom
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function creates a blank line in the bottomost row in the 
 *       terminal, and shifts all other data upwards in video memory. 
 *       It does NOT print a line header...leave it to the caller.
 * NOTE: If arrow key scrolling is implemented, this function will 
 *       have to be modified to save the topmost row of video memory
 *       to a buffer/stack.
 */
void general_scroll(void)
{
	int i, j;
	//Shift data upwards in video memory
	uint8_t * upper_row = (uint8_t*)VMEM_START;
	uint8_t * lower_row = (uint8_t*)(VMEM_START + NUM_COLS*2);
	for(i=0; i<(NUM_ROWS-1); i++)
	{
		for(j=0; j<(NUM_COLS*2); j++)
		{
			*(upper_row + j) = *(lower_row + j);
		}
		upper_row += NUM_COLS*2;
		lower_row += NUM_COLS*2;
	}

	//Clear out the bottom row
	for(i=0; i<(NUM_COLS*2); i++)
	{
		if(i%2)
			*(upper_row + i) = ATTRIB;
		else
			*(upper_row + i) = ' ';
	}
	return;
}

/* Function which erases a single character from the screen
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function will be used mainly when backspace is pressed
 */
void delete_character(void)
{
	//Check to make sure that the cursor is not at the top left
	if(!(screen_x == 0 && screen_y == 0))
	{
		uint8_t * ptr = (uint8_t*)(VMEM_START + 2*(screen_y*NUM_COLS + screen_x - 1));
		*ptr = ' ';
		screen_x--;
		if(screen_x < 0)
		{
			screen_y--;
			screen_x = NUM_COLS-1;
		}
	}

}



















/********************************************************************
 ********FUNCTIONS BELOW THIS LINE ARE NOT IMPLEMENTED YET***********
 ********************************************************************/

/* Function to scroll the screen up by one line when the up arrow
 * pressed.
 * PARAMETERS: none
 * RETURNS: 0 on success, -1 on failure
 * INFO: This function modifies the beginning and end pointers into 
 *       video memory.  The function will check if scrolling is possible,
 *       and will return -1 if the limits of video memory have been 
 *       reached.
 */
int32_t scroll_up(void)
{
	//Implement this additional feature if you have time
	return 0;
}

/* Function to scroll the screen down by one line when the down arrow
 * is pressed.
 * PARAMETERS: none
 * RETURNS: 0 on success, -1 on failure
 * INFO: This function modifies the beginning and end pointers into 
 *       video memory.  The function will check if scrolling is possible,
 *       and will return -1 if the limits of video memory have been 
 *       reached.
 */
int32_t scroll_down(void)
{
	//Implement this additional feature if you have time
	return 0;
}

