#ifndef _file_sys_h
#define _file_sys_h

#include "types.h"
#include "lib.h"

#define boot_block_reserved_bytes 52
#define dir_entry_reserved_bytes 24
#define filename_bytes 32
#define max_num_dir_entries 63
#define nth_data_block_max 1023
#define DENTRY_SIZE	64
#define BLOCK_SIZE	4096

typedef struct f_ops
{
	uint32_t (*open)(char[],uint32_t);
	uint32_t (*read)(struct f_desc *,char[],uint32_t);
	uint32_t (*write)(char[],uint32_t);
	uint32_t (*close)(char[],uint32_t);
} f_ops_t;

//directory entry structure
typedef struct directory_entry
{
	uint8_t file_name[filename_bytes];
	uint32_t file_type;
	uint32_t inode_num;
	uint8_t reserved[dir_entry_reserved_bytes];
}  __attribute__((__packed__)) dentry_t;

//boot_block structure
typedef struct boot_block
{
	uint32_t num_dir_entries;
	uint32_t num_inodes;
	uint32_t num_data_blocks;
	uint8_t reserved[boot_block_reserved_bytes];
	dentry_t dir_entry[max_num_dir_entries];
} __attribute__((__packed__)) boot_block_t;



//index node structure
typedef struct index_node
{
	uint32_t length_bytes;
	uint32_t nth_data_block[nth_data_block_max];
}__attribute__((__packed__)) index_node_t;

typedef struct read_descriptor_t
{
	uint32_t written;
	uint32_t count;
	int32_t error;
	uint8_t * buf;
} read_desc_t;

typedef struct f_desc
{
	f_ops_t * fops;
	index_node_t * inode;
	uint32_t offs;
} f_desc_t;

boot_block_t * bootblock;

//only read does anything
int32_t fs_dir_open(char[], uint32_t);
int32_t fs_dir_read(f_desc_t* fdescriptor, char[], uint32_t);
int32_t fs_dir_write(char[], uint32_t);
int32_t fs_dir_close(char[], uint32_t);


//only read does anything
int32_t fs_open(char[], uint32_t);
int32_t fs_read(f_desc_t * fdescriptor, char[], uint32_t);
int32_t fs_write(char[], uint32_t);
int32_t fs_close(char[], uint32_t);

int32_t read_dentry_by_name (const uint8_t* fname, dentry_t* dentry);
int32_t read_dentry_by_index( uint32_t index, dentry_t* dentry);
int32_t read_data (uint32_t inode, uint32_t offset,uint8_t* buf, uint32_t length);

//init file system
int32_T file_system_init(void*);

#endif
