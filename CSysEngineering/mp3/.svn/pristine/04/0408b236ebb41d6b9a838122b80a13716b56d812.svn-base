/* i8259.c - Functions to interact with the 8259 interrupt controller
 * vim:ts=4 noexpandtab
 */

#include "i8259.h"
#include "lib.h"

#define MASTER_INTERRUPTS 8
#define MASK_ALL 0xFF

/* Interrupt masks to determine which interrupts
 * are enabled and disabled */
uint8_t master_mask; /* IRQs 0-7 */
uint8_t slave_mask; /* IRQs 8-15 */

/* Initialize the 8259 PIC */
void
i8259_init(void)
{
	// 1) Disable all interrupts
	master_mask = MASK_ALL;
	slave_mask = MASK_ALL;
	outb(master_mask, MASTER_8259_PORT);
	outb(slave_mask, SLAVE_8259_PORT);

	// 2) Send out ICWs to each PIC
	outb(ICW1, MASTER_8259_PORT);
	outb(ICW1, SLAVE_8259_PORT);
	outb(ICW2_MASTER, MASTER_8259_PORT);
	outb(ICW2_SLAVE, SLAVE_8259_PORT);
	outb(ICW3_MASTER, MASTER_8259_PORT);
	outb(ICW3_SLAVE, SLAVE_8259_PORT);
	outb(ICW4, MASTER_8259_PORT);
	outb(ICW4, SLAVE_8259_PORT);
}

/* Enable (unmask) the specified IRQ */
void
enable_irq(uint32_t irq_num)
{
	if (irq_num < MASTER_INTERRUPTS)
	{
		master_mask = inb(MASTER_DATA) & ~(1 << irq_num);
		outb(master_mask, MASTER_8259_PORT);
	}
	else
	{
		irq_num -= 8;
		slave_mask = inb(SLAVE_DATA) & ~(1 << irq_num);
		outb(slave_mask, SLAVE_8259_PORT);
	}
}

/* Disable (mask) the specified IRQ */
void
disable_irq(uint32_t irq_num)
{
	if (irq_num < MASTER_INTERRUPTS)
	{
		master_mask = inb(MASTER_DATA) | (1 << irq_num);
		outb(master_mask, MASTER_8259_PORT);
	}
	else
	{
		irq_num -= 8;
		slave_mask = inb(SLAVE_DATA) | (1 << irq_num);
		outb(slave_mask, SLAVE_8259_PORT);
	}

}

/* Send end-of-interrupt signal for the specified IRQ */
void
send_eoi(uint32_t irq_num)
{
		if (irq_num >= MASTER_INTERRUPTS)							// check if slave was the one that sent interrupt; if so, send EOI to slave as well
			outb(EOI | irq_num, SLAVE_8259_PORT);					// outb(data, port)  -> writes one byte of data to port
		outb(EOI | irq_num, MASTER_8259_PORT);					// EOI has to be sent to master irregardless of where interrupt orginated from
}

