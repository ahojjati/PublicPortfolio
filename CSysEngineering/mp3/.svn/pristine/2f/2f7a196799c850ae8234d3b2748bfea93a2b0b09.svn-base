#ifndef _PAGE_H
#define _PAGE_H

#include "lib.h"

#define ENABLE_MASK        							0x80000000
#define NUM_TABLE_ENTRIES 							1024
#define FOUR_MD										0x10000010
#define RESERVED_CR4_SET_TO_ZERO					0x000007FF
#define KERNEL_ADDRESS								1
#define BOOL_KB_PAGE_TRUE							1
#define BOOL_KB_PAGE_FALSE							0	
#define VIDEO_MEM_VIRTUAL							0xB8000
#define VIDEO_MEM_20_MOST_SIG_BITS_PAGE_TAB			0xB8000 >> 12
#define	USER 										1
#define SUPERVISOR 									0
#define BIT_ON										1
#define BIT_OFF										0
#define DPL_KERNEL									0
#define DPL_USER									3
#define RESERVED									0
#define PROCESS_ADDRESS1							2
#define PROCESS_ADDRESS2							3
#define PROCESS_VIRT_ADDR							32


////////////////////////////////STRUCTURES/////////////////////////////////////
// Page directory entries
typedef union page_dir_entry{
	struct
	{
		uint32_t present_4kb : 1;
		uint32_t read_write_4kb : 1;
		uint32_t user_supervisor_4kb : 1;
		uint32_t write_through_4kb : 1;
		uint32_t cache_disabled_4kb : 1;
		uint32_t accessed_4kb : 1;
		uint32_t reserved_4kb : 1;
		uint32_t page_size_4kb : 1;
		uint32_t global_page_4kb : 1;
		uint32_t available_4kb : 3;
		uint32_t page_table_base_addr_4kb : 20;
	}__attribute__((packed)); 
	struct
	{
		uint32_t present_4mb : 1;
		uint32_t read_write_4mb : 1;
		uint32_t user_supervisor_4mb : 1;
		uint32_t write_through_4mb : 1;
		uint32_t cache_disabled_4mb : 1;
		uint32_t accessed_4mb : 1;
		uint32_t dirty_4mb : 1;
		uint32_t page_size_4mb : 1;
		uint32_t global_page_4mb : 1;
		uint32_t available_4mb : 3;
		uint32_t page_table_attribute_index_4mb : 1;
		uint32_t reserved_4mb : 9;	
		uint32_t page_table_base_addr_4mb : 10;
		}__attribute__((packed));
} page_dir_entry;

//The page directory itself defined in x86_desc.S
extern page_dir_entry page_dir[PAGE_DIR_SIZE];



// Page table entries
typedef struct page_table_entry{
		uint32_t present : 1;
		uint32_t read_write : 1;
		uint32_t user_supervisor : 1;
		uint32_t write_through : 1;
		uint32_t cache_disabled : 1;
		uint32_t accessed : 1;
		uint32_t dirty : 1;
		uint32_t page_table_attribute_index : 1;
		uint32_t global_page : 1;
		uint32_t available : 3;
		uint32_t page_table_base_addr : 20;
		}__attribute__((packed)) page_table_entry;

//The page table itself defined in x86_desc.S
extern page_table_entry page_tab[PAGE_TABLE_SIZE];

////////////////////////////////Prototypes/////////////////////////////////////

//Sets up 2 directory entries and 1 page table
void init_paging();

//Sets up a page dir table
void setup_page_dir(page_dir_entry* page_directory);

//Adds a page dir entry to the page dir table specified
void add_page_dir_entry(page_dir_entry* page_directory,uint8_t table_entry,uint32_t ptr_to_page,uint8_t kb_page,uint32_t user_supervisor);

//Sets up a page directory table
void setup_page_table(page_table_entry* page_tabl);

//Adds a page table entry to the page table specified
void add_page_table_entry(page_table_entry* page_table,uint32_t table_entry,uint32_t ptr_to_page, uint32_t user_supervisor);

#endif

