/* init_idt.c - Set up the idt table with the correct entries.  
The entries consist of interupt Gates that hold the pointers to 
the interrupt, exception , and system call handlers.
*/


#include "init_idt.h"
#include "idt_handlers.h" 
#include "x86_desc.h"
#include "keyboard.h"
#include "rtc.h"

extern idt_desc_t idt[NUM_VEC];


/*
 * init_idt
 * Description: Initializes the idt table with the correct interrupt gate information.  This allows handling of the interrupts
 * Inputs: none
 * Outputs: none
 * Returns: none
 * Side Effects: populates IDT to allow interrupt handling
 */
void init_idt()
{	

//Set up the intel define exceptions and interrupts
	 setup_intel_interrupts(0, (uint32_t)&divide_error);
	 setup_intel_interrupts(1, (uint32_t)&debug);
	 setup_intel_interrupts(2, (uint32_t)&nmi);
	 setup_intel_interrupts(3, (uint32_t)&int3);
	 setup_intel_interrupts(4, (uint32_t)&overflow);
	 setup_intel_interrupts(5, (uint32_t)&bounds);
	 setup_intel_interrupts(6, (uint32_t)&invalid_op);
	 setup_intel_interrupts(7, (uint32_t)&device_not_available);
	 setup_intel_interrupts(8, (uint32_t)&doublefault_fn);
	 setup_intel_interrupts(9, (uint32_t)&coprocessor_segment_overrun);
	 setup_intel_interrupts(10,(uint32_t)&invalid_TSS);
	 setup_intel_interrupts(11,(uint32_t)&segment_not_present);
	 setup_intel_interrupts(12,(uint32_t)&stack_segment);
	 setup_intel_interrupts(13,(uint32_t)&general_protection);
	 setup_intel_interrupts(14,(uint32_t)&page_fault);
	 setup_intel_interrupts(16,(uint32_t)&floating_point);
	 setup_intel_interrupts(17,(uint32_t)&alignment_check);
	 setup_intel_interrupts(18,(uint32_t)&machine_check);
	 setup_intel_interrupts(19,(uint32_t)&simd_coprocessor_error);

//Set up master idt table
	 setup_irq_interrupts(32, (uint32_t)&master_irq0);
	 setup_irq_interrupts(33, (uint32_t)&keyboard_idt);
	 setup_irq_interrupts(34, (uint32_t)&master_irq2);
	 setup_irq_interrupts(35, (uint32_t)&master_irq3);
	 setup_irq_interrupts(36, (uint32_t)&master_irq4);
	 setup_irq_interrupts(37, (uint32_t)&master_irq5);
	 setup_irq_interrupts(38, (uint32_t)&master_irq6);
	 setup_irq_interrupts(39, (uint32_t)&master_irq7);

//Set up slave idt table
	 setup_irq_interrupts(40, (uint32_t)&rtc_idt);
	 setup_irq_interrupts(41, (uint32_t)&slave_irq1);
	 setup_irq_interrupts(42, (uint32_t)&slave_irq2);
	 setup_irq_interrupts(43, (uint32_t)&slave_irq3);
	 setup_irq_interrupts(44, (uint32_t)&slave_irq4);
	 setup_irq_interrupts(45, (uint32_t)&slave_irq5);
	 setup_irq_interrupts(46, (uint32_t)&slave_irq6);
	 setup_irq_interrupts(47, (uint32_t)&slave_irq7);

//Set up system calls in idt table
	 setup_system_calls(128, (uint32_t)&system_call);
}


/*
 * setup_intel_interrupts(uint8_t vector, uint32_t handler)
 * Description: Setup intel interrupts function which is used to update the idt table 
 *				with the correct gate values. Interrupts can only be handled by the kernel therefore DPL_KERNEL
 * Inputs: vector -	The vector number that is associated with the interrupt descriptor table
 *		   handler - A function pointer to the interrupt handler code
 * Outputs:none
 * Returns:none
 * Side Effects:Create a interrupt gate and populate the idt table which is used to point to the correct interrupt handler
 */
void setup_intel_interrupts(uint8_t vector, uint32_t handler)
{
	//Setting up 0xXXXX8E000010XXXX
	idt[vector].seg_selector = KERNEL_CS;
	idt[vector].reserved4 = RESERVED;
	idt[vector].reserved3 = BIT_OFF;
	idt[vector].reserved2 = BIT_ON;	
	idt[vector].reserved1 = BIT_ON;
	idt[vector].size = BIT_ON;
	idt[vector].reserved0 = BIT_OFF;
	idt[vector].dpl = DPL_KERNEL;
	idt[vector].present = BIT_ON;
	SET_IDT_ENTRY(idt[vector],handler);
}


/*
 * setup_irq_interrupts(uint8_t vector, uint32_t handler)
  Description: Setup irq interrupts function which is used to update the idt table 
 *				with the correct gate values. Interrupts can only be handled by the kernel therefore DPL_KERNEL
 * Inputs: vector -	The vector number that is associated with the interrupt descriptor table
 *		   handler - A function pointer to the interrupt handler code
  * Outputs:none
 * Returns:none
 * Side Effects:Create a interrupt gate and populate the idt table which is used to point to the correct interrupt handler
 */
void setup_irq_interrupts(uint8_t vector, uint32_t handler)
{
	//Setting up 0xXXXX8E000010XXXX
	idt[vector].seg_selector = KERNEL_CS;
	idt[vector].reserved4 = RESERVED;
	idt[vector].reserved3 = BIT_OFF;
	idt[vector].reserved2 = BIT_ON;
	idt[vector].reserved1 = BIT_ON;
	idt[vector].size = BIT_ON;
	idt[vector].reserved0 = BIT_OFF;
	idt[vector].dpl = DPL_KERNEL;
	idt[vector].present = BIT_ON;
	SET_IDT_ENTRY(idt[vector],handler);
}


/*
 * setup_system_calls(uint8_t vector, uint32_t handler)
 * Description: Setup system calls function which is used to update the idt table 
 *				with the correct gate values.  User code are allowed to make system calls so DPL_USER allows 
 * Inputs: vector -	The vector number that is associated with the interrupt descriptor table
 *		   handler - A function pointer to the interrupt handler code
 * Outputs:none
 * Returns:none
 * Side Effects:Create a interrupt gate and populate the idt table which is used to point to the correct interrupt handler
 */
void setup_system_calls(uint8_t vector, uint32_t handler)
{
	//Setting up 0xXXXXEE000010XXXX
	idt[vector].seg_selector = KERNEL_CS;
	idt[vector].reserved4 = RESERVED;
	idt[vector].reserved3 = BIT_OFF;
	idt[vector].reserved2 = BIT_ON;	
	idt[vector].reserved1 = BIT_ON;
	idt[vector].size = BIT_ON;
	idt[vector].reserved0 = BIT_OFF;
	idt[vector].dpl = DPL_USER;
	idt[vector].present = BIT_ON;
	SET_IDT_ENTRY(idt[vector],handler);
}
