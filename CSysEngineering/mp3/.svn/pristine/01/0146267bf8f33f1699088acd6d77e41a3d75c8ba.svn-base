//File containing source code for terminal driver

#include "terminal.h"

//int write_lock = 0;

//static uint8_t line_buf[128];
//static uint8_t line_buf_index = 0;
static int wrap_flag;
static int newline_flag = 0;

extern int screen_y,screen_x;
extern char* video_mem;
extern volatile int term_read;

terminal_info_t* current_terminal;
terminal_info_t* terminal_array;   


/* Function to initialize global terminal_info structures
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function initializes terminal data structures in order
 *       to support multiple terminals.  It sets the current terminal
 *       equal to terminal 1.  
 *       ****SHOULD WE CALL SHELL IN EACH OF THE TERMINALS HERE??****
 */
void init_terminals(void)
{
	//Initialize the terminal address
	terminal_array = (terminal_info_t*)TERMINAL_ADDRESS;
	int32_t i;
	for(i=0; i<NUM_TERMINALS; i++)
	{
		current_terminal = &terminal_array[i];
		terminal_open(i);
	}
	//Reset the current terminal to be the first one
	switch_terminals(0);
	return;
}

/* Function to handle system calls for reading from the terminal
 * PARAMETERS: fd - ???
 *			   buf - a pointer to a buffer in which to write the data
 *			   nbytes - not used by this function
 * RETURNS: the number of bytes successfully read into the buffer
 * INFO: This function reads bytes from the line buffer up until the
 *		 newline character (\n).  If no newline character is present
 *       than the entire buffer is read.  This function also clears
 *		 the line buffer.  It is intended to be called mainly
 *		 by the shell.
 */
int32_t terminal_read(int32_t fd, void * buf, int32_t nbytes)
{
	//Check if the process's terminal is equal to the active terminal.  If true, 
	//continue, if not, continue to block
	while(current_process->terminal_number != current_terminal->terminal_number)
	{

	}
	clear_line_buffer(current_process->terminal_number);
 	term_read = 1; 	
 	while(term_read == 1)
 	{
 		//Wait for user input
 	}
 	memcpy(buf,(void*)&terminal_array[current_process->terminal_number].line_buf,BUFFER_SIZE);
	return terminal_array[current_process->terminal_number].line_buf_index;
}

/* Function to handle system calls for writing to the terminal
 * PARAMETERS: fd - ???
 			   buf - a pointer to a buffer which contains the data to write
 			   nbytes - the number of bytes to write from the buffer
 * RETURNS: the number of bytes successfully written, or -1 on failure
 * INFO: This function sets the write_lock to 1 at the beginning of
 *       execution, and clears it before returning.  This will
 *       allow user programs to block keyboard echoes while trying
 *       to output information to the terminal.
 */
int32_t terminal_write(int32_t fd, const void * buf, int32_t nbytes)
{
	int32_t i;
	uint8_t* _buf = (uint8_t*)buf;
	//Check for valid pointer and valid n_bytes
	if(buf == NULL || nbytes < 0)
		return -1;
    else
    {
    	terminal_array[current_process->terminal_number].write_lock = 1;
    	if(terminal_array[current_process->terminal_number].line_buf_index == 0 && 
    		terminal_array[current_process->terminal_number].newline_flag == 1)
    	{
    		terminal_array[current_process->terminal_number].newline_flag = 0;
    		buffer_add_char('\n', current_process->terminal_number);
    		//Check if current process and active terminal match
    		if(current_process->terminal_number == current_terminal->terminal_number)
    		{
    			screen_add_char('\n');
    		}
    	}
        for(i=0; i<nbytes; i++)
        {
            //Check if current process and active terminal match
            if(current_process->terminal_number == current_terminal->terminal_number)
    		{
    			screen_add_char(_buf[i]);
    		}
        }
       	clear_line_buffer(current_process->terminal_number);
       	terminal_array[current_process->terminal_number].write_lock = 0;
        return i;
    }
}


/* Function to initialize the terminal
 * PARAMETERS: terminal_number - the terminal to open
 * RETURNS: 0 on success, -1 on failure
 * INFO: clears the screen for that terminal
 */
int32_t terminal_open(int32_t terminal_number)
{
	//Check for valid terminal number
	if(terminal_number < 0 || terminal_number >= NUM_TERMINALS)
		return -1;
	terminal_array[terminal_number].terminal_number = terminal_number;
	clear_screen_data(terminal_number);
	terminal_array[terminal_number].flag = 0;
	terminal_array[terminal_number].line_buf_index = 0;
	terminal_array[terminal_number].screen_y = 0;
	terminal_array[terminal_number].screen_x = 0;
	terminal_array[terminal_number].wrap_flag = 0;
	terminal_array[terminal_number].newline_flag = 0;
	terminal_array[terminal_number].write_lock = 0;
	clear_line_buffer(terminal_number);
	return 0;
}

/* Function to close the terminal
 * PARAMETERS: none
 * RETURNS: -1 always, since the terminal should never be closed
 * INFO: This function does nothing, since it should not be possible
 *       for a system call to close the terminal
 */
int32_t terminal_close()
{
	//Terminal cannot be closed, so return -1
	return -1;
}

/* Function to clear the physical video memory
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function atually clears physical video memory
 */
void clear_screen()
{
	//Clear out video memory
	clear();
	screen_x = 0;
	screen_y = 0;
	//Clear out the video buffer of the current terminal
	clear_screen_data(current_terminal->terminal_number);
}

/* Function to clear out the memory associated with a terminal and put the cursor at the top
 * PARAMETERS: terminal_number - the terminal for which to clear data, indexed beginning 
 *                               at zero
 * RETURNS: void
 * INFO: This function erases video data for the given terminal
 */
void clear_screen_data(int32_t terminal_number)
{
	/*If page up/page down is implemented, save data to a stack here before clearing*/

	int32_t i;
	for(i=0; i<SCREEN_SIZE; i++)
	{
		terminal_array[terminal_number].screen_data[i<<1] = ' ';
		terminal_array[terminal_number].screen_data[(i<<1)+1] = ATTRIB;
	}
	terminal_array[terminal_number].wrap_flag = 0;
	terminal_array[terminal_number].screen_x = 0;
	terminal_array[terminal_number].screen_y = 0;
	clear_line_buffer(terminal_number);
	return;
}


/* Function to scroll the screen up if text reaches the bottom
 * PARAMETERS: terminal_number - the terminal to scroll for
 * RETURNS: void
 * INFO: This function creates a blank line in the bottomost row in the
 *       terminal, and shifts all other data upwards in video memory.
 *       It does NOT p-rint a line header...leave it to the caller.
 * NOTE: This function does not scroll physical memory, rather, it scrolls
 *       the video data for the given terminal
 */
void general_scroll(int32_t terminal_number)
{
	int i, j;
	//Shift data upwards in the video buffer
	for(i=0; i<NUM_COLS; i++)
	{
		for(j=0; j<NUM_ROWS; j++)
		{
			terminal_array[terminal_number].screen_data[(NUM_COLS*j + i) << 1] 
				= terminal_array[terminal_number].screen_data[(NUM_COLS*(j+1) + i) << 1];
        	terminal_array[terminal_number].screen_data[((NUM_COLS*j + i) << 1) + 1] 
        		= terminal_array[terminal_number].screen_data[((NUM_COLS*(j+1) + i) << 1) + 1];
		}
	}
}

/* Function to scroll the screen up if text reaches the bottom
 * PARAMETERS: none
 * RETURNS: void
 * INFO: This function creates a blank line in the bottomost row in the
 *       terminal, and shifts all other data upwards in video memory.
 * NOTE: This function actually scrolls physical video memory
 */
void physical_scroll(void)
{
	int i, j;
	//Shift data upwards in video memory
	for(i=0; i<NUM_COLS; i++)
	{
		for(j=0; j<NUM_ROWS; j++)
		{
		*(uint8_t *)(video_mem + ((NUM_COLS*j + i) << 1)) = *(uint8_t *)(video_mem + ((NUM_COLS*(j+1) + i) << 1));
        *(uint8_t *)(video_mem + ((NUM_COLS*j + i) << 1) + 1) = *(uint8_t *)(video_mem + ((NUM_COLS*(j+1) + i) << 1) + 1);
		}
	}
}

/* Helper function which clears out the line buffer for the current terminal
 * PARAMETERS: terminal_number
 * RETURNS: void
 * INFO: This function fills the line buffer with all spaces
 */
void clear_line_buffer(int32_t terminal_number)
{
	int i;
	for (i = 0; i < BUFFER_SIZE; ++i)
	{
		terminal_array[terminal_number].line_buf[i] = 0;
	}
	terminal_array[terminal_number].line_buf_index = 0;
	return;
}

/* Helper function which writes a single charcter to the line buffer
 * PARAMETERS: c - the character to write
 *             terminal_number - the terminal who's line buffer to write into
 * RETURNS: 0 on success, -1 on failure (ie. line buf is full)
 * INFO: This function will not write to the line buffer if it is
 *       already full.
 */
int line_buffer_add(uint8_t c, int32_t terminal_number)
{
	uint8_t buf_index = terminal_array[terminal_number].line_buf_index;
	if(buf_index < BUFFER_SIZE)
	{
		terminal_array[terminal_number].line_buf[buf_index] = c;
		terminal_array[terminal_number].line_buf_index++;
		return 0;
	}
	else
		return -1;
}

/* Function that adds characters to the screen
 * PARAMETERS: c - the character to write
 * RETURNS: 0 on success, -1 on failure (ie. line buf is full)
 * INFO: I pretty much made a truth table because there were too many conflicting edge cases. 
 */

void screen_add_char(uint8_t c)
{
//printf("screen_x = %d and screen_y = %d and c= %d", screen_x,screen_y,wrap_flag);
	if(current_terminal->line_buf_index < BUFFER_SIZE)
	{
		//Read these if statments like a truth table
		if(c != '\n' && screen_x != 0 && wrap_flag !=1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1) 
		{	
			putc(c);
		}

		else if(c != '\n' && screen_x != 0 && wrap_flag !=1 && screen_y != NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			putc(c);
			putc(10); //emulate a new line
			wrap_flag = 1;
		}

		else if(c != '\n' && screen_x != 0 && wrap_flag !=1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);

		}

		else if(c != '\n' && screen_x != 0 && wrap_flag !=1 && screen_y == NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			putc(c);
			putc(10); //emulate a new line
			screen_y = NUM_ROWS-1;
			physical_scroll();
			wrap_flag = 1;

		}

		else if(c != '\n' && screen_x != 0 && wrap_flag ==1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);
		}

		else if(c != '\n' && screen_x != 0 && wrap_flag ==1 && screen_y != NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			putc(c);
			putc(10); //emulate a new line
			wrap_flag = 1;
		}

		else if(c != '\n' && screen_x != 0 && wrap_flag ==1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);
		}

		else if(c != '\n' && screen_x != 0 && wrap_flag ==1 && screen_y == NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			putc(c);
			putc(10); //emulate a new line
			screen_y = NUM_ROWS-1;
			physical_scroll();
			wrap_flag = 1;
		}

		else if(c != '\n' && screen_x == 0 && wrap_flag !=1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);
		}

		else if(c != '\n' && screen_x == 0 && wrap_flag !=1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);
		}


		else if(c != '\n' && screen_x == 0 && wrap_flag ==1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);
		}


		else if(c != '\n' && screen_x == 0 && wrap_flag ==1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			putc(c);
		}


		else if(c == '\n' && screen_x != 0 && wrap_flag !=1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag !=1 && screen_y != NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag !=1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
			screen_y = NUM_ROWS-1;
			physical_scroll();
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag !=1 && screen_y == NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
			screen_y = NUM_ROWS-1;
			physical_scroll();
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag ==1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag ==1 && screen_y != NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag ==1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
			screen_y = NUM_ROWS-1;
			physical_scroll();
		}

		else if(c == '\n' && screen_x != 0 && wrap_flag ==1 && screen_y == NUM_ROWS-1 && screen_x == NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
			screen_y = NUM_ROWS-1;
			physical_scroll();
		}

		else if(c == '\n' && screen_x == 0 && wrap_flag !=1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
		}


		else if(c == '\n' && screen_x == 0 && wrap_flag !=1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
			putc(c);
			screen_y = NUM_ROWS-1;
			physical_scroll();
		}


		else if(c == '\n' && screen_x == 0 && wrap_flag ==1 && screen_y != NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
		}


		else if(c == '\n' && screen_x == 0 && wrap_flag ==1 && screen_y == NUM_ROWS-1 && screen_x != NUM_COLS-1)
		{
			wrap_flag = 0;
		}
	}
	//The following code adds a new line if the end of the line buffer is reached
	else if(current_terminal->line_buf_index == BUFFER_SIZE)
	{
		newline_flag = 1;
		//REMOVE THIS CODE WHEN PROGRAMS ARE RUNNING AGAIN
		//screen_y++;
		//screen_x = 0;
		//clear_line_buffer(current_terminal->terminal_number);
	}
	buffer_add_char(c, current_terminal->terminal_number);
	return;
}

/* Function that adds characters to a terminal's video buffer
 * PARAMETERS: c - the character to write
 *             terminal_number - specifies which terminal's buffer to write to
 * RETURNS: 0 on success, -1 on failure (ie. line buf is full)
 * INFO: I pretty much made a truth table because there were too many conflicting edge cases. 
 */
void buffer_add_char(uint8_t c, uint32_t terminal_number)
{
//printf("screen_x = %d and screen_y = %d and c= %d", screen_x,screen_y,wrap_flag);
	if(terminal_array[terminal_number].line_buf_index < BUFFER_SIZE)
	{
		//Read these if statments like a truth table
		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1) 
		{	
			buffer_putc(c, terminal_number);
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			buffer_putc(10, terminal_number); //emulate a new line
			terminal_array[terminal_number].wrap_flag = 1;
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;

		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			buffer_putc(10, terminal_number); //emulate a new line
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			terminal_array[terminal_number].wrap_flag = 1;
			return;

		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			buffer_putc(10, terminal_number); //emulate a new line
			terminal_array[terminal_number].wrap_flag = 1;
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			buffer_putc(10, terminal_number); //emulate a new line
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			terminal_array[terminal_number].wrap_flag = 1;
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;
		}

		if(c != '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;
		}


		if(c != '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;
		}


		if(c != '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			buffer_putc(c, terminal_number);
			return;
		}


		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x != 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x == NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			return;
		}

		if(c == '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			return;
		}


		if(c == '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag !=1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			buffer_putc(c, terminal_number);
			terminal_array[terminal_number].screen_y = NUM_ROWS-1;
			general_scroll(terminal_number);
			return;
		}


		if(c == '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y != NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			return;
		}


		if(c == '\n' && terminal_array[terminal_number].screen_x == 0 && terminal_array[terminal_number].wrap_flag ==1 
			&& terminal_array[terminal_number].screen_y == NUM_ROWS-1 && terminal_array[terminal_number].screen_x != NUM_COLS-1)
		{
			terminal_array[terminal_number].wrap_flag = 0;
			return;
		}
	}
	//The following code adds a new line if the end of the line buffer is reached
	else if(terminal_array[terminal_number].line_buf_index == BUFFER_SIZE)
	{
		terminal_array[terminal_number].newline_flag = 1;
		//REMOVE THIS CODE LATER
		//terminal_array[terminal_number].screen_y++;
		//terminal_array[terminal_number].screen_x = 0;
		return;
	}
}

/* Function that deletes a character from physical video memory
 * PARAMETERS: none
 * RETURNS: 0 on success, -1 on failure (ie. line buf is full)
 * INFO: 
 */
int screen_delete(void)
{
	if(current_terminal->line_buf_index == 0)
		return -1;
	if(screen_x == 0)
	{
		screen_y--;
		screen_x = NUM_COLS -1;
		 *(uint8_t *)(video_mem + ((NUM_COLS*screen_y + screen_x) << 1)) = 0;
    	 *(uint8_t *)(video_mem + ((NUM_COLS*screen_y + screen_x) << 1) + 1) = 0;
 	}
 	else 
 	{	
 		screen_x --;
 		*(uint8_t *)(video_mem + ((NUM_COLS*screen_y + screen_x) << 1)) = 0;
    	*(uint8_t *)(video_mem + ((NUM_COLS*screen_y + screen_x) << 1) + 1) = 0;
 	}
 	//Delete the corresponding character in the current terminal's video  buffer
 	vid_buffer_delete(current_terminal->terminal_number);
    return 0;
}

/* Function that deletes a character from a terminal's video buffer
 * PARAMETERS: terminal_number - the terminal from which to delete data
 * RETURNS: 0 on success, -1 on failure (ie. line buf is full)
 * INFO: 
 */
int vid_buffer_delete(int32_t terminal_number)
{
	if(terminal_array[terminal_number].line_buf_index == 0)
		return -1;
	if(terminal_array[terminal_number].screen_x == 0)
	{
		terminal_array[terminal_number].screen_y--;
		terminal_array[terminal_number].screen_x = NUM_COLS -1;
		terminal_array[terminal_number].screen_data[(NUM_COLS*screen_y + screen_x) << 1] = 0;
    	terminal_array[terminal_number].screen_data[((NUM_COLS*screen_y + screen_x) << 1) + 1] = 0;
 	}
 	else 
 	{	
 		terminal_array[terminal_number].screen_x--;
 		terminal_array[terminal_number].screen_data[(NUM_COLS*screen_y + screen_x) << 1] = 0;
    	terminal_array[terminal_number].screen_data[((NUM_COLS*screen_y + screen_x) << 1) + 1] = 0;
 	}
    return 0;
}




/* Helper function which removes a single character from the line buffer
 * PARAMETERS: terminal_number - the terminal number whos line buffer to modify
 * RETURNS: 0 on success, -1 if the buffer is empty (nothing to delete)
 * INFO: 
 */
int line_buffer_delete(int32_t terminal_number)
{
	//printf("line buf = %d \n \n",line_buf_index);
	if(terminal_array[terminal_number].line_buf_index == 0)
		return -1;
	else
	{
		int32_t temp;
		terminal_array[terminal_number].line_buf_index--;
		temp = terminal_array[terminal_number].line_buf_index;
		terminal_array[terminal_number].line_buf[temp] = 0;
		return 0;
	}
}

/* Function which switches the active terminal
 * PARAMETERS: num - the terminal number to switch to, indexed BEGINNING AT ZERO!
 * RETURNS: 0 on success, -1 on failure
 * INFO: This function checks for a valid terminal number, and also checks
 *       to make sure that the number passed in does not equal the current terminal
 *       number.  If the above cases check out, it overwrites video memory.
 */
int32_t switch_terminals(uint32_t num)
{
	if(num >= NUM_TERMINALS || num == current_terminal->terminal_number)
		return -1;
	//Clear interrupts during terminal switch
	//cli();
	memcpy((void*)VIDEO, (void*)terminal_array[num].screen_data, 2*SCREEN_SIZE);
	screen_x = terminal_array[num].screen_x;
	screen_y = terminal_array[num].screen_y;
	wrap_flag = terminal_array[num].wrap_flag;
	newline_flag = terminal_array[num].newline_flag;
	//write_lock = terminal_array[num].write_lock;
	current_terminal = &terminal_array[num];
	//sti();
	cli();
	if (terminal_array[num].flag == 0)
	{
		send_eoi(1);
		setup_page_process(num);
		terminal_array[num].flag = 1;
		asm volatile ("pushl %0 \n" :: "r"(USER_DS));
	    asm volatile ("pushl %0 \n" :: "r"(MB_128+FOUR_MB-4));
	    asm volatile ("pushfl");
	    asm volatile ("orl $0x200, (%%esp)" ::);
	    asm volatile ("pushl %0 \n" :: "r"(USER_CS));
	    asm volatile ("pushl %0 \n" :: "r"(e_entry_shell));
	 	tss.esp0 = KSTACK_START-2*FOUR_KB*(num+1);
	    asm volatile ("iretl");
	}
	return 0;
}


/* Function that adds characters to a terminal's video buffer
 * PARAMETERS: c - the character to write
 *             terminal_number - specifies which terminal's buffer to write to
 * RETURNS: 0 on success, -1 on failure (ie. line buf is full)
 * INFO: I pretty much made a truth table because there were too many conflicting edge cases. 
 */
void
buffer_putc(uint8_t c, uint32_t terminal_number)
{
	int xpos, ypos;
	xpos = terminal_array[terminal_number].screen_x;
	ypos = terminal_array[terminal_number].screen_y;
    if(c == '\n' || c == '\r') {
        ypos++;
        xpos=0;
    } else {
        terminal_array[terminal_number].screen_data[(NUM_COLS*ypos + xpos) << 1] = c;
        terminal_array[terminal_number].screen_data[((NUM_COLS*ypos + xpos) << 1) + 1] = ATTRIB;
        xpos++;
        xpos %= NUM_COLS;
        ypos = (ypos + (xpos / NUM_COLS)) % NUM_ROWS;
    }
    terminal_array[terminal_number].screen_x = xpos;
    terminal_array[terminal_number].screen_y = ypos;
}



/********************************************************************
 ********FUNCTIONS BELOW THIS LINE ARE NOT IMPLEMENTED YET***********
 ********************************************************************/

/* Function to scroll the screen up by one line when the up arrow
 * pressed.
 * PARAMETERS: none
 * RETURNS: 0 on success, -1 on failure
 * INFO: This function will access saved off-screen data and put
 *       it back onto the screen.
 */
int32_t scroll_up(void)
{
	//Implement this additional feature if you have time
	return 0;
}

/* Function to scroll the screen down by one line when the down arrow
 * is pressed.
 * PARAMETERS: none
 * RETURNS: 0 on success, -1 on failure
 * INFO: This function will access saved off-screen data and put
 *       it back onto the screen.
 */
int32_t scroll_down(void)
{
	//Implement this additional feature if you have time
	return 0;
}

